// Author: CNW On ground team 1
// Created: October 1, 2023
//

Files in this directory:
-----------------------

schema.fbs
        defines the schema for the user-defined type that we want to serialize        

tcp_client.py
        we send serialized order message or health message and receive deserialized response message via ZMQ socket. 

tcp_grocery.py
        we receive deserialized order message and send serialized response message via ZMQ socket. 

tcp_health.py
        we receive deserialized health message and send serialized response message via ZMQ socket. 
        
serialize_order.py
        uses the generated flatbuffer logic to serialize and deserialize order message.
        
serialize_health.py
        uses the generated flatbuffer logic to serialize and deserialize health message.
        
serialize_response.py
        uses the generated flatbuffer logic to serialize and deserialize response message.
                
OgTeam1PA1
        A directory along with Flatbuf-based code that is generated by the flatbuf compiler using command "flatc --python schema.fbs".


Running the Code
-------------------------
setting:
flatc --python schema.fbs

test:
running locally:
(1) Open three shells in your Ubuntu VM
(2) Invoke "python3 tcp_grocery.py", and invoke "python3 tcp_health.py" in two shells
(3) Invoke "python3 tcp_client.py" in the third shell

running in mininet (three hosts and one switch):
(1) Open a shell in your Ubuntu VM
(2) Invoke "sudo mn --topo=single,3 --link=tc,delay=10ms -x"
(3) In h2, invoke "python3 tcp_grocery.py"; in h3, invoke "python3 tcp_health.py"
(4) In h1, invoke "python3 tcp_client.py -aG 10.0.0.2 -aH 10.0.0.3"

running in mininet (three hosts and three switches):
(1) Open a shell in your Ubuntu VM
(2) Invoke "sudo mn --topo=linear,3 --link=tc,delay=10ms -x"
(3) In h2, invoke "python3 tcp_grocery.py"; in h3, invoke "python3 tcp_health.py"
(4) In h1, invoke "python3 tcp_client.py -aG 10.0.0.2 -aH 10.0.0.3"

running in mininet (27 hosts and 13 switches):
(1) Open a shell in your Ubuntu VM
(2) Invoke "sudo mn -c", then invoke "sudo mn --topo=tree,depth=3,fanout=3 --link=tc,delay=10ms -x"
(3) In h1, invoke "python3 tcp_grocery.py"; in h27, invoke "python3 tcp_health.py"
(4) In any other host, invoke "python3 tcp_client.py -aG 10.0.0.1 -aH 10.0.0.27"

