# automatically generated by the FlatBuffers compiler, do not modify

# namespace: OgTeam1PA1

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class MilkTable(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MilkTable()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMilkTable(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # MilkTable
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MilkTable
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # MilkTable
    def Quantity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def MilkTableStart(builder):
    builder.StartObject(2)

def Start(builder):
    MilkTableStart(builder)

def MilkTableAddType(builder, type):
    builder.PrependInt32Slot(0, type, 0)

def AddType(builder, type):
    MilkTableAddType(builder, type)

def MilkTableAddQuantity(builder, quantity):
    builder.PrependFloat32Slot(1, quantity, 0.0)

def AddQuantity(builder, quantity):
    MilkTableAddQuantity(builder, quantity)

def MilkTableEnd(builder):
    return builder.EndObject()

def End(builder):
    return MilkTableEnd(builder)
