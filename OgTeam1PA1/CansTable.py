# automatically generated by the FlatBuffers compiler, do not modify

# namespace: OgTeam1PA1

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CansTable(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CansTable()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCansTable(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # CansTable
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CansTable
    def Coke(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CansTable
    def Beer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CansTable
    def Pepsi(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def CansTableStart(builder):
    builder.StartObject(3)

def Start(builder):
    CansTableStart(builder)

def CansTableAddCoke(builder, coke):
    builder.PrependInt32Slot(0, coke, 0)

def AddCoke(builder, coke):
    CansTableAddCoke(builder, coke)

def CansTableAddBeer(builder, beer):
    builder.PrependInt32Slot(1, beer, 0)

def AddBeer(builder, beer):
    CansTableAddBeer(builder, beer)

def CansTableAddPepsi(builder, pepsi):
    builder.PrependInt32Slot(2, pepsi, 0)

def AddPepsi(builder, pepsi):
    CansTableAddPepsi(builder, pepsi)

def CansTableEnd(builder):
    return builder.EndObject()

def End(builder):
    return CansTableEnd(builder)
